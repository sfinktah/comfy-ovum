{
  "source_url": "https://docs.python.org/3.11/library/os.path.html",
  "module_id": "module-os.path",
  "scraped_at": 1760290930.2215245,
  "items": [
    {
      "id": "os.path.abspath",
      "href": "https://docs.python.org/3.11/library/os.path.html#os.path.abspath",
      "module": "os.path",
      "name": "abspath",
      "qualname": "os.path.abspath",
      "signature": "os.path.abspath(path)",
      "params": [
        "path"
      ],
      "returns": "str",
      "summary": "Return a normalized absolutized version of the pathname path . On most platforms, this is equivalent to calling the function normpath() as follows: normpath(join(os.getcwd(), path)) .",
      "description_text": "Return a normalized absolutized version of the pathname path . On most platforms, this is equivalent to calling the function normpath() as follows: normpath(join(os.getcwd(), path)) .",
      "description_html": "<p>Return a normalized absolutized version of the pathname <em>path</em>. On most\nplatforms, this is equivalent to calling the function <a class=\"reference internal\" href=\"#os.path.normpath\" title=\"os.path.normpath\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">normpath()</span></code></a> as\nfollows: <code class=\"docutils literal notranslate\"><span class=\"pre\">normpath(join(os.getcwd(),</span> <span class=\"pre\">path))</span></code>.</p>\n<div class=\"versionchanged\">\n<p><span class=\"versionmodified changed\">Changed in version 3.6: </span>Accepts a <a class=\"reference internal\" href=\"../glossary.html#term-path-like-object\"><span class=\"xref std std-term\">path-like object</span></a>.</p>\n</div>\n"
    },
    {
      "id": "os.path.basename",
      "href": "https://docs.python.org/3.11/library/os.path.html#os.path.basename",
      "module": "os.path",
      "name": "basename",
      "qualname": "os.path.basename",
      "signature": "os.path.basename(path)",
      "params": [
        "path"
      ],
      "returns": "str",
      "summary": "Return the base name of pathname path . This is the second element of the pair returned by passing path to the function split() . Note that the result of this function is different from the Unix basename program; where basename for '/foo/bar/' returns 'bar' , the basename() function returns an empty string ( '' ).",
      "description_text": "Return the base name of pathname path . This is the second element of the pair returned by passing path to the function split() . Note that the result of this function is different from the Unix basename program; where basename for '/foo/bar/' returns 'bar' , the basename() function returns an empty string ( '' ).",
      "description_html": "<p>Return the base name of pathname <em>path</em>.  This is the second element of the\npair returned by passing <em>path</em> to the function <a class=\"reference internal\" href=\"#os.path.split\" title=\"os.path.split\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">split()</span></code></a>.  Note that\nthe result of this function is different\nfrom the Unix <strong class=\"program\">basename</strong> program; where <strong class=\"program\">basename</strong> for\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'/foo/bar/'</span></code> returns <code class=\"docutils literal notranslate\"><span class=\"pre\">'bar'</span></code>, the <a class=\"reference internal\" href=\"#os.path.basename\" title=\"os.path.basename\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">basename()</span></code></a> function returns an\nempty string (<code class=\"docutils literal notranslate\"><span class=\"pre\">''</span></code>).</p>\n<div class=\"versionchanged\">\n<p><span class=\"versionmodified changed\">Changed in version 3.6: </span>Accepts a <a class=\"reference internal\" href=\"../glossary.html#term-path-like-object\"><span class=\"xref std std-term\">path-like object</span></a>.</p>\n</div>\n"
    },
    {
      "id": "os.path.commonpath",
      "href": "https://docs.python.org/3.11/library/os.path.html#os.path.commonpath",
      "module": "os.path",
      "name": "commonpath",
      "qualname": "os.path.commonpath",
      "signature": "os.path.commonpath(paths)",
      "params": [
        "paths"
      ],
      "returns": "str",
      "summary": "Return the longest common sub-path of each pathname in the sequence paths . Raise ValueError if paths contain both absolute and relative pathnames, the paths are on the different drives or if paths is empty. Unlike commonprefix() , this returns a valid path.",
      "description_text": "Return the longest common sub-path of each pathname in the sequence paths . Raise ValueError if paths contain both absolute and relative pathnames, the paths are on the different drives or if paths is empty. Unlike commonprefix() , this returns a valid path. Availability : Unix, Windows. New in version 3.5.",
      "description_html": "<p>Return the longest common sub-path of each pathname in the sequence\n<em>paths</em>.  Raise <a class=\"reference internal\" href=\"exceptions.html#ValueError\" title=\"ValueError\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">ValueError</span></code></a> if <em>paths</em> contain both absolute\nand relative pathnames, the <em>paths</em> are on the different drives or\nif <em>paths</em> is empty.  Unlike <a class=\"reference internal\" href=\"#os.path.commonprefix\" title=\"os.path.commonprefix\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">commonprefix()</span></code></a>, this returns a\nvalid path.</p>\n<div class=\"availability docutils container\">\n<p><a class=\"reference internal\" href=\"intro.html#availability\"><span class=\"std std-ref\">Availability</span></a>: Unix, Windows.</p>\n</div>\n<div class=\"versionadded\">\n<p><span class=\"versionmodified added\">New in version 3.5.</span></p>\n</div>\n<div class=\"versionchanged\">\n<p><span class=\"versionmodified changed\">Changed in version 3.6: </span>Accepts a sequence of <a class=\"reference internal\" href=\"../glossary.html#term-path-like-object\"><span class=\"xref std std-term\">path-like objects</span></a>.</p>\n</div>\n"
    },
    {
      "id": "os.path.commonprefix",
      "href": "https://docs.python.org/3.11/library/os.path.html#os.path.commonprefix",
      "module": "os.path",
      "name": "commonprefix",
      "qualname": "os.path.commonprefix",
      "signature": "os.path.commonprefix(list)",
      "params": [
        "list"
      ],
      "returns": "str",
      "summary": "Return the longest path prefix (taken character-by-character) that is a prefix of all paths in list . If list is empty, return the empty string ( '' ).",
      "description_text": "Return the longest path prefix (taken character-by-character) that is a prefix of all paths in list . If list is empty, return the empty string ( '' ). Note This function may return invalid paths because it works a character at a time. To obtain a valid path, see commonpath() . >>> os . path . commonprefix ([ '/usr/lib' , '/usr/local/lib' ]) '/usr/l' >>> os . path . commonpath ([ '/usr/lib' , '/usr/local/lib' ]) '/usr'",
      "description_html": "<p>Return the longest path prefix (taken character-by-character) that is a\nprefix of all paths in  <em>list</em>.  If <em>list</em> is empty, return the empty string\n(<code class=\"docutils literal notranslate\"><span class=\"pre\">''</span></code>).</p>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>This function may return invalid paths because it works a\ncharacter at a time.  To obtain a valid path, see\n<a class=\"reference internal\" href=\"#os.path.commonpath\" title=\"os.path.commonpath\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">commonpath()</span></code></a>.</p>\n<div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">commonprefix</span><span class=\"p\">([</span><span class=\"s1\">'/usr/lib'</span><span class=\"p\">,</span> <span class=\"s1\">'/usr/local/lib'</span><span class=\"p\">])</span>\n<span class=\"go\">'/usr/l'</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">commonpath</span><span class=\"p\">([</span><span class=\"s1\">'/usr/lib'</span><span class=\"p\">,</span> <span class=\"s1\">'/usr/local/lib'</span><span class=\"p\">])</span>\n<span class=\"go\">'/usr'</span>\n</pre></div>\n</div>\n</div>\n<div class=\"versionchanged\">\n<p><span class=\"versionmodified changed\">Changed in version 3.6: </span>Accepts a <a class=\"reference internal\" href=\"../glossary.html#term-path-like-object\"><span class=\"xref std std-term\">path-like object</span></a>.</p>\n</div>\n"
    },
    {
      "id": "os.path.dirname",
      "href": "https://docs.python.org/3.11/library/os.path.html#os.path.dirname",
      "module": "os.path",
      "name": "dirname",
      "qualname": "os.path.dirname",
      "signature": "os.path.dirname(path)",
      "params": [
        "path"
      ],
      "returns": "str",
      "summary": "Return the directory name of pathname path . This is the first element of the pair returned by passing path to the function split() .",
      "description_text": "Return the directory name of pathname path . This is the first element of the pair returned by passing path to the function split() .",
      "description_html": "<p>Return the directory name of pathname <em>path</em>.  This is the first element of\nthe pair returned by passing <em>path</em> to the function <a class=\"reference internal\" href=\"#os.path.split\" title=\"os.path.split\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">split()</span></code></a>.</p>\n<div class=\"versionchanged\">\n<p><span class=\"versionmodified changed\">Changed in version 3.6: </span>Accepts a <a class=\"reference internal\" href=\"../glossary.html#term-path-like-object\"><span class=\"xref std std-term\">path-like object</span></a>.</p>\n</div>\n"
    },
    {
      "id": "os.path.exists",
      "href": "https://docs.python.org/3.11/library/os.path.html#os.path.exists",
      "module": "os.path",
      "name": "exists",
      "qualname": "os.path.exists",
      "signature": "os.path.exists(path)",
      "params": [
        "path"
      ],
      "returns": "bool",
      "summary": "Return True if path refers to an existing path or an open file descriptor. Returns False for broken symbolic links. On some platforms, this function may return False if permission is not granted to execute os.stat() on the requested file, even if the path physically exists.",
      "description_text": "Return True if path refers to an existing path or an open file descriptor. Returns False for broken symbolic links. On some platforms, this function may return False if permission is not granted to execute os.stat() on the requested file, even if the path physically exists.",
      "description_html": "<p>Return <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> if <em>path</em> refers to an existing path or an open\nfile descriptor.  Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> for broken symbolic links.  On\nsome platforms, this function may return <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> if permission is\nnot granted to execute <a class=\"reference internal\" href=\"os.html#os.stat\" title=\"os.stat\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">os.stat()</span></code></a> on the requested file, even\nif the <em>path</em> physically exists.</p>\n<div class=\"versionchanged\">\n<p><span class=\"versionmodified changed\">Changed in version 3.3: </span><em>path</em> can now be an integer: <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> is returned if it is an\n open file descriptor, <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> otherwise.</p>\n</div>\n<div class=\"versionchanged\">\n<p><span class=\"versionmodified changed\">Changed in version 3.6: </span>Accepts a <a class=\"reference internal\" href=\"../glossary.html#term-path-like-object\"><span class=\"xref std std-term\">path-like object</span></a>.</p>\n</div>\n"
    },
    {
      "id": "os.path.lexists",
      "href": "https://docs.python.org/3.11/library/os.path.html#os.path.lexists",
      "module": "os.path",
      "name": "lexists",
      "qualname": "os.path.lexists",
      "signature": "os.path.lexists(path)",
      "params": [
        "path"
      ],
      "returns": "bool",
      "summary": "Return True if path refers to an existing path. Returns True for broken symbolic links. Equivalent to exists() on platforms lacking os.lstat() .",
      "description_text": "Return True if path refers to an existing path. Returns True for broken symbolic links. Equivalent to exists() on platforms lacking os.lstat() .",
      "description_html": "<p>Return <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> if <em>path</em> refers to an existing path. Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> for\nbroken symbolic links.   Equivalent to <a class=\"reference internal\" href=\"#os.path.exists\" title=\"os.path.exists\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">exists()</span></code></a> on platforms lacking\n<a class=\"reference internal\" href=\"os.html#os.lstat\" title=\"os.lstat\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">os.lstat()</span></code></a>.</p>\n<div class=\"versionchanged\">\n<p><span class=\"versionmodified changed\">Changed in version 3.6: </span>Accepts a <a class=\"reference internal\" href=\"../glossary.html#term-path-like-object\"><span class=\"xref std std-term\">path-like object</span></a>.</p>\n</div>\n"
    },
    {
      "id": "os.path.expanduser",
      "href": "https://docs.python.org/3.11/library/os.path.html#os.path.expanduser",
      "module": "os.path",
      "name": "expanduser",
      "qualname": "os.path.expanduser",
      "signature": "os.path.expanduser(path)",
      "params": [
        "path"
      ],
      "returns": "str",
      "summary": "On Unix and Windows, return the argument with an initial component of ~ or ~user replaced by that user ’s home directory.",
      "description_text": "On Unix and Windows, return the argument with an initial component of ~ or ~user replaced by that user ’s home directory. On Unix, an initial ~ is replaced by the environment variable HOME if it is set; otherwise the current user’s home directory is looked up in the password directory through the built-in module pwd . An initial ~user is looked up directly in the password directory. On Windows, USERPROFILE will be used if set, otherwise a combination of HOMEPATH and HOMEDRIVE will be used. An initial ~user is handled by checking that the last directory component of the current user’s home directory matches USERNAME , and replacing it if so. If the expansion fails or if the path does not begin with a tilde, the path is returned unchanged.",
      "description_html": "<p>On Unix and Windows, return the argument with an initial component of <code class=\"docutils literal notranslate\"><span class=\"pre\">~</span></code> or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">~user</span></code> replaced by that <em>user</em>’s home directory.</p>\n<p id=\"index-2\">On Unix, an initial <code class=\"docutils literal notranslate\"><span class=\"pre\">~</span></code> is replaced by the environment variable <span class=\"target\" id=\"index-3\"></span><code class=\"xref std std-envvar docutils literal notranslate\"><span class=\"pre\">HOME</span></code>\nif it is set; otherwise the current user’s home directory is looked up in the\npassword directory through the built-in module <a class=\"reference internal\" href=\"pwd.html#module-pwd\" title=\"pwd: The password database (getpwnam() and friends). (Unix)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pwd</span></code></a>. An initial <code class=\"docutils literal notranslate\"><span class=\"pre\">~user</span></code>\nis looked up directly in the password directory.</p>\n<p>On Windows, <span class=\"target\" id=\"index-4\"></span><code class=\"xref std std-envvar docutils literal notranslate\"><span class=\"pre\">USERPROFILE</span></code> will be used if set, otherwise a combination\nof <span class=\"target\" id=\"index-5\"></span><code class=\"xref std std-envvar docutils literal notranslate\"><span class=\"pre\">HOMEPATH</span></code> and <span class=\"target\" id=\"index-6\"></span><code class=\"xref std std-envvar docutils literal notranslate\"><span class=\"pre\">HOMEDRIVE</span></code> will be used.  An initial\n<code class=\"docutils literal notranslate\"><span class=\"pre\">~user</span></code> is handled by checking that the last directory component of the current\nuser’s home directory matches <span class=\"target\" id=\"index-7\"></span><code class=\"xref std std-envvar docutils literal notranslate\"><span class=\"pre\">USERNAME</span></code>, and replacing it if so.</p>\n<p>If the expansion fails or if the path does not begin with a tilde, the path is\nreturned unchanged.</p>\n<div class=\"versionchanged\">\n<p><span class=\"versionmodified changed\">Changed in version 3.6: </span>Accepts a <a class=\"reference internal\" href=\"../glossary.html#term-path-like-object\"><span class=\"xref std std-term\">path-like object</span></a>.</p>\n</div>\n<div class=\"versionchanged\">\n<p><span class=\"versionmodified changed\">Changed in version 3.8: </span>No longer uses <span class=\"target\" id=\"index-8\"></span><code class=\"xref std std-envvar docutils literal notranslate\"><span class=\"pre\">HOME</span></code> on Windows.</p>\n</div>\n"
    },
    {
      "id": "os.path.expandvars",
      "href": "https://docs.python.org/3.11/library/os.path.html#os.path.expandvars",
      "module": "os.path",
      "name": "expandvars",
      "qualname": "os.path.expandvars",
      "signature": "os.path.expandvars(path)",
      "params": [
        "path"
      ],
      "returns": "str",
      "summary": "Return the argument with environment variables expanded. Substrings of the form $name or ${name} are replaced by the value of environment variable name . Malformed variable names and references to non-existing variables are left unchanged.",
      "description_text": "Return the argument with environment variables expanded. Substrings of the form $name or ${name} are replaced by the value of environment variable name . Malformed variable names and references to non-existing variables are left unchanged. On Windows, %name% expansions are supported in addition to $name and ${name} .",
      "description_html": "<p>Return the argument with environment variables expanded.  Substrings of the form\n<code class=\"docutils literal notranslate\"><span class=\"pre\">$name</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">${name}</span></code> are replaced by the value of environment variable\n<em>name</em>.  Malformed variable names and references to non-existing variables are\nleft unchanged.</p>\n<p>On Windows, <code class=\"docutils literal notranslate\"><span class=\"pre\">%name%</span></code> expansions are supported in addition to <code class=\"docutils literal notranslate\"><span class=\"pre\">$name</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">${name}</span></code>.</p>\n<div class=\"versionchanged\">\n<p><span class=\"versionmodified changed\">Changed in version 3.6: </span>Accepts a <a class=\"reference internal\" href=\"../glossary.html#term-path-like-object\"><span class=\"xref std std-term\">path-like object</span></a>.</p>\n</div>\n"
    },
    {
      "id": "os.path.getatime",
      "href": "https://docs.python.org/3.11/library/os.path.html#os.path.getatime",
      "module": "os.path",
      "name": "getatime",
      "qualname": "os.path.getatime",
      "signature": "os.path.getatime(path)",
      "params": [
        "path"
      ],
      "returns": "float",
      "summary": "Return the time of last access of path . The return value is a floating point number giving the number of seconds since the epoch (see the time module). Raise OSError if the file does not exist or is inaccessible.",
      "description_text": "Return the time of last access of path . The return value is a floating point number giving the number of seconds since the epoch (see the time module). Raise OSError if the file does not exist or is inaccessible.",
      "description_html": "<p>Return the time of last access of <em>path</em>.  The return value is a floating point number giving\nthe number of seconds since the epoch (see the  <a class=\"reference internal\" href=\"time.html#module-time\" title=\"time: Time access and conversions.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">time</span></code></a> module).  Raise\n<a class=\"reference internal\" href=\"exceptions.html#OSError\" title=\"OSError\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">OSError</span></code></a> if the file does not exist or is inaccessible.</p>\n"
    },
    {
      "id": "os.path.getmtime",
      "href": "https://docs.python.org/3.11/library/os.path.html#os.path.getmtime",
      "module": "os.path",
      "name": "getmtime",
      "qualname": "os.path.getmtime",
      "signature": "os.path.getmtime(path)",
      "params": [
        "path"
      ],
      "returns": "float",
      "summary": "Return the time of last modification of path . The return value is a floating point number giving the number of seconds since the epoch (see the time module). Raise OSError if the file does not exist or is inaccessible.",
      "description_text": "Return the time of last modification of path . The return value is a floating point number giving the number of seconds since the epoch (see the time module). Raise OSError if the file does not exist or is inaccessible.",
      "description_html": "<p>Return the time of last modification of <em>path</em>.  The return value is a floating point number\ngiving the number of seconds since the epoch (see the  <a class=\"reference internal\" href=\"time.html#module-time\" title=\"time: Time access and conversions.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">time</span></code></a> module).\nRaise <a class=\"reference internal\" href=\"exceptions.html#OSError\" title=\"OSError\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">OSError</span></code></a> if the file does not exist or is inaccessible.</p>\n<div class=\"versionchanged\">\n<p><span class=\"versionmodified changed\">Changed in version 3.6: </span>Accepts a <a class=\"reference internal\" href=\"../glossary.html#term-path-like-object\"><span class=\"xref std std-term\">path-like object</span></a>.</p>\n</div>\n"
    },
    {
      "id": "os.path.getctime",
      "href": "https://docs.python.org/3.11/library/os.path.html#os.path.getctime",
      "module": "os.path",
      "name": "getctime",
      "qualname": "os.path.getctime",
      "signature": "os.path.getctime(path)",
      "params": [
        "path"
      ],
      "returns": "float",
      "summary": "Return the system’s ctime which, on some systems (like Unix) is the time of the last metadata change, and, on others (like Windows), is the creation time for path . The return value is a number giving the number of seconds since the epoch (see the time module). Raise OSError if the file does not exist or is inaccessible.",
      "description_text": "Return the system’s ctime which, on some systems (like Unix) is the time of the last metadata change, and, on others (like Windows), is the creation time for path . The return value is a number giving the number of seconds since the epoch (see the time module). Raise OSError if the file does not exist or is inaccessible.",
      "description_html": "<p>Return the system’s ctime which, on some systems (like Unix) is the time of the\nlast metadata change, and, on others (like Windows), is the creation time for <em>path</em>.\nThe return value is a number giving the number of seconds since the epoch (see\nthe  <a class=\"reference internal\" href=\"time.html#module-time\" title=\"time: Time access and conversions.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">time</span></code></a> module).  Raise <a class=\"reference internal\" href=\"exceptions.html#OSError\" title=\"OSError\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">OSError</span></code></a> if the file does not exist or\nis inaccessible.</p>\n<div class=\"versionchanged\">\n<p><span class=\"versionmodified changed\">Changed in version 3.6: </span>Accepts a <a class=\"reference internal\" href=\"../glossary.html#term-path-like-object\"><span class=\"xref std std-term\">path-like object</span></a>.</p>\n</div>\n"
    },
    {
      "id": "os.path.getsize",
      "href": "https://docs.python.org/3.11/library/os.path.html#os.path.getsize",
      "module": "os.path",
      "name": "getsize",
      "qualname": "os.path.getsize",
      "signature": "os.path.getsize(path)",
      "params": [
        "path"
      ],
      "returns": "int",
      "summary": "Return the size, in bytes, of path . Raise OSError if the file does not exist or is inaccessible.",
      "description_text": "Return the size, in bytes, of path . Raise OSError if the file does not exist or is inaccessible.",
      "description_html": "<p>Return the size, in bytes, of <em>path</em>.  Raise <a class=\"reference internal\" href=\"exceptions.html#OSError\" title=\"OSError\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">OSError</span></code></a> if the file does\nnot exist or is inaccessible.</p>\n<div class=\"versionchanged\">\n<p><span class=\"versionmodified changed\">Changed in version 3.6: </span>Accepts a <a class=\"reference internal\" href=\"../glossary.html#term-path-like-object\"><span class=\"xref std std-term\">path-like object</span></a>.</p>\n</div>\n"
    },
    {
      "id": "os.path.isabs",
      "href": "https://docs.python.org/3.11/library/os.path.html#os.path.isabs",
      "module": "os.path",
      "name": "isabs",
      "qualname": "os.path.isabs",
      "signature": "os.path.isabs(path)",
      "params": [
        "path"
      ],
      "returns": "bool",
      "summary": "Return True if path is an absolute pathname. On Unix, that means it begins with a slash, on Windows that it begins with a (back)slash after chopping off a potential drive letter.",
      "description_text": "Return True if path is an absolute pathname. On Unix, that means it begins with a slash, on Windows that it begins with a (back)slash after chopping off a potential drive letter.",
      "description_html": "<p>Return <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> if <em>path</em> is an absolute pathname.  On Unix, that means it\nbegins with a slash, on Windows that it begins with a (back)slash after chopping\noff a potential drive letter.</p>\n<div class=\"versionchanged\">\n<p><span class=\"versionmodified changed\">Changed in version 3.6: </span>Accepts a <a class=\"reference internal\" href=\"../glossary.html#term-path-like-object\"><span class=\"xref std std-term\">path-like object</span></a>.</p>\n</div>\n"
    },
    {
      "id": "os.path.isfile",
      "href": "https://docs.python.org/3.11/library/os.path.html#os.path.isfile",
      "module": "os.path",
      "name": "isfile",
      "qualname": "os.path.isfile",
      "signature": "os.path.isfile(path)",
      "params": [
        "path"
      ],
      "returns": "bool",
      "summary": "Return True if path is an existing regular file. This follows symbolic links, so both islink() and isfile() can be true for the same path.",
      "description_text": "Return True if path is an existing regular file. This follows symbolic links, so both islink() and isfile() can be true for the same path.",
      "description_html": "<p>Return <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> if <em>path</em> is an <a class=\"reference internal\" href=\"#os.path.exists\" title=\"os.path.exists\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">existing</span></code></a> regular file.\nThis follows symbolic links, so both <a class=\"reference internal\" href=\"#os.path.islink\" title=\"os.path.islink\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">islink()</span></code></a> and <a class=\"reference internal\" href=\"#os.path.isfile\" title=\"os.path.isfile\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">isfile()</span></code></a> can\nbe true for the same path.</p>\n<div class=\"versionchanged\">\n<p><span class=\"versionmodified changed\">Changed in version 3.6: </span>Accepts a <a class=\"reference internal\" href=\"../glossary.html#term-path-like-object\"><span class=\"xref std std-term\">path-like object</span></a>.</p>\n</div>\n"
    },
    {
      "id": "os.path.isdir",
      "href": "https://docs.python.org/3.11/library/os.path.html#os.path.isdir",
      "module": "os.path",
      "name": "isdir",
      "qualname": "os.path.isdir",
      "signature": "os.path.isdir(path)",
      "params": [
        "path"
      ],
      "returns": "bool",
      "summary": "Return True if path is an existing directory. This follows symbolic links, so both islink() and isdir() can be true for the same path.",
      "description_text": "Return True if path is an existing directory. This follows symbolic links, so both islink() and isdir() can be true for the same path.",
      "description_html": "<p>Return <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> if <em>path</em> is an <a class=\"reference internal\" href=\"#os.path.exists\" title=\"os.path.exists\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">existing</span></code></a> directory.  This\nfollows symbolic links, so both <a class=\"reference internal\" href=\"#os.path.islink\" title=\"os.path.islink\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">islink()</span></code></a> and <a class=\"reference internal\" href=\"#os.path.isdir\" title=\"os.path.isdir\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">isdir()</span></code></a> can be true\nfor the same path.</p>\n<div class=\"versionchanged\">\n<p><span class=\"versionmodified changed\">Changed in version 3.6: </span>Accepts a <a class=\"reference internal\" href=\"../glossary.html#term-path-like-object\"><span class=\"xref std std-term\">path-like object</span></a>.</p>\n</div>\n"
    },
    {
      "id": "os.path.islink",
      "href": "https://docs.python.org/3.11/library/os.path.html#os.path.islink",
      "module": "os.path",
      "name": "islink",
      "qualname": "os.path.islink",
      "signature": "os.path.islink(path)",
      "params": [
        "path"
      ],
      "returns": "bool",
      "summary": "Return True if path refers to an existing directory entry that is a symbolic link. Always False if symbolic links are not supported by the Python runtime.",
      "description_text": "Return True if path refers to an existing directory entry that is a symbolic link. Always False if symbolic links are not supported by the Python runtime.",
      "description_html": "<p>Return <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> if <em>path</em> refers to an <a class=\"reference internal\" href=\"#os.path.exists\" title=\"os.path.exists\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">existing</span></code></a> directory\nentry that is a symbolic link.  Always <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> if symbolic links are not\nsupported by the Python runtime.</p>\n<div class=\"versionchanged\">\n<p><span class=\"versionmodified changed\">Changed in version 3.6: </span>Accepts a <a class=\"reference internal\" href=\"../glossary.html#term-path-like-object\"><span class=\"xref std std-term\">path-like object</span></a>.</p>\n</div>\n"
    },
    {
      "id": "os.path.ismount",
      "href": "https://docs.python.org/3.11/library/os.path.html#os.path.ismount",
      "module": "os.path",
      "name": "ismount",
      "qualname": "os.path.ismount",
      "signature": "os.path.ismount(path)",
      "params": [
        "path"
      ],
      "returns": "bool",
      "summary": "Return True if pathname path is a mount point : a point in a file system where a different file system has been mounted. On POSIX, the function checks whether path ’s parent, path /.. , is on a different device than path , or whether path /.. and path point to the same i-node on the same device — this should detect mount points for all Unix and POSIX variants. It is not able to reliably detect bind mounts on the same filesystem. On Windows, a drive letter root and a share UNC are always mount points, and for any other path GetVolumePathName is called to see if it is different from the input path.",
      "description_text": "Return True if pathname path is a mount point : a point in a file system where a different file system has been mounted. On POSIX, the function checks whether path ’s parent, path /.. , is on a different device than path , or whether path /.. and path point to the same i-node on the same device — this should detect mount points for all Unix and POSIX variants. It is not able to reliably detect bind mounts on the same filesystem. On Windows, a drive letter root and a share UNC are always mount points, and for any other path GetVolumePathName is called to see if it is different from the input path. New in version 3.4: Support for detecting non-root mount points on Windows.",
      "description_html": "<p>Return <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> if pathname <em>path</em> is a <em class=\"dfn\">mount point</em>: a point in a\nfile system where a different file system has been mounted.  On POSIX, the\nfunction checks whether <em>path</em>’s parent, <code class=\"file docutils literal notranslate\"><em><span class=\"pre\">path</span></em><span class=\"pre\">/..</span></code>, is on a different\ndevice than <em>path</em>, or whether <code class=\"file docutils literal notranslate\"><em><span class=\"pre\">path</span></em><span class=\"pre\">/..</span></code> and <em>path</em> point to the same\ni-node on the same device — this should detect mount points for all Unix\nand POSIX variants.  It is not able to reliably detect bind mounts on the\nsame filesystem.  On Windows, a drive letter root and a share UNC are\nalways mount points, and for any other path <code class=\"docutils literal notranslate\"><span class=\"pre\">GetVolumePathName</span></code> is called\nto see if it is different from the input path.</p>\n<div class=\"versionadded\">\n<p><span class=\"versionmodified added\">New in version 3.4: </span>Support for detecting non-root mount points on Windows.</p>\n</div>\n<div class=\"versionchanged\">\n<p><span class=\"versionmodified changed\">Changed in version 3.6: </span>Accepts a <a class=\"reference internal\" href=\"../glossary.html#term-path-like-object\"><span class=\"xref std std-term\">path-like object</span></a>.</p>\n</div>\n"
    },
    {
      "id": "os.path.join",
      "href": "https://docs.python.org/3.11/library/os.path.html#os.path.join",
      "module": "os.path",
      "name": "join",
      "qualname": "os.path.join",
      "signature": "os.path.join(path,*paths)",
      "params": [
        "path",
        "* paths"
      ],
      "returns": "str",
      "summary": "Join one or more path segments intelligently. The return value is the concatenation of path and all members of *paths , with exactly one directory separator following each non-empty part, except the last. That is, the result will only end in a separator if the last part is either empty or ends in a separator. If a segment is an absolute path (which on Windows requires both a drive and a root), then all previous segments are ignored and joining continues from the absolute path segment.",
      "description_text": "Join one or more path segments intelligently. The return value is the concatenation of path and all members of *paths , with exactly one directory separator following each non-empty part, except the last. That is, the result will only end in a separator if the last part is either empty or ends in a separator. If a segment is an absolute path (which on Windows requires both a drive and a root), then all previous segments are ignored and joining continues from the absolute path segment. On Windows, the drive is not reset when a rooted path segment (e.g., r'\\foo' ) is encountered. If a segment is on a different drive or is an absolute path, all previous segments are ignored and the drive is reset. Note that since there is a current directory for each drive, os.path.join(\"c:\", \"foo\") represents a path relative to the current directory on drive C: ( c:foo ), not c:\\foo .",
      "description_html": "<p>Join one or more path segments intelligently.  The return value is the\nconcatenation of <em>path</em> and all members of <em>*paths</em>, with exactly one\ndirectory separator following each non-empty part, except the last. That is,\nthe result will only end in a separator if the last part is either empty or\nends in a separator. If a segment is an absolute path (which on Windows\nrequires both a drive and a root), then all previous segments are ignored and\njoining continues from the absolute path segment.</p>\n<p>On Windows, the drive is not reset when a rooted path segment (e.g.,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">r'\\foo'</span></code>) is encountered. If a segment is on a different drive or is an\nabsolute path, all previous segments are ignored and the drive is reset. Note\nthat since there is a current directory for each drive,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">os.path.join(\"c:\",</span> <span class=\"pre\">\"foo\")</span></code> represents a path relative to the current\ndirectory on drive <code class=\"file docutils literal notranslate\"><span class=\"pre\">C:</span></code> (<code class=\"file docutils literal notranslate\"><span class=\"pre\">c:foo</span></code>), not <code class=\"file docutils literal notranslate\"><span class=\"pre\">c:\\foo</span></code>.</p>\n<div class=\"versionchanged\">\n<p><span class=\"versionmodified changed\">Changed in version 3.6: </span>Accepts a <a class=\"reference internal\" href=\"../glossary.html#term-path-like-object\"><span class=\"xref std std-term\">path-like object</span></a> for <em>path</em> and <em>paths</em>.</p>\n</div>\n"
    },
    {
      "id": "os.path.normcase",
      "href": "https://docs.python.org/3.11/library/os.path.html#os.path.normcase",
      "module": "os.path",
      "name": "normcase",
      "qualname": "os.path.normcase",
      "signature": "os.path.normcase(path)",
      "params": [
        "path"
      ],
      "returns": "str",
      "summary": "Normalize the case of a pathname. On Windows, convert all characters in the pathname to lowercase, and also convert forward slashes to backward slashes. On other operating systems, return the path unchanged.",
      "description_text": "Normalize the case of a pathname. On Windows, convert all characters in the pathname to lowercase, and also convert forward slashes to backward slashes. On other operating systems, return the path unchanged.",
      "description_html": "<p>Normalize the case of a pathname.  On Windows, convert all characters in the\npathname to lowercase, and also convert forward slashes to backward slashes.\nOn other operating systems, return the path unchanged.</p>\n<div class=\"versionchanged\">\n<p><span class=\"versionmodified changed\">Changed in version 3.6: </span>Accepts a <a class=\"reference internal\" href=\"../glossary.html#term-path-like-object\"><span class=\"xref std std-term\">path-like object</span></a>.</p>\n</div>\n"
    },
    {
      "id": "os.path.normpath",
      "href": "https://docs.python.org/3.11/library/os.path.html#os.path.normpath",
      "module": "os.path",
      "name": "normpath",
      "qualname": "os.path.normpath",
      "signature": "os.path.normpath(path)",
      "params": [
        "path"
      ],
      "returns": "str",
      "summary": "Normalize a pathname by collapsing redundant separators and up-level references so that A//B , A/B/ , A/./B and A/foo/../B all become A/B . This string manipulation may change the meaning of a path that contains symbolic links. On Windows, it converts forward slashes to backward slashes. To normalize case, use normcase() .",
      "description_text": "Normalize a pathname by collapsing redundant separators and up-level references so that A//B , A/B/ , A/./B and A/foo/../B all become A/B . This string manipulation may change the meaning of a path that contains symbolic links. On Windows, it converts forward slashes to backward slashes. To normalize case, use normcase() . Note On POSIX systems, in accordance with IEEE Std 1003.1 2013 Edition; 4.13 Pathname Resolution , if a pathname begins with exactly two slashes, the first component following the leading characters may be interpreted in an implementation-defined manner, although more than two leading characters shall be treated as a single character.",
      "description_html": "<blockquote>\n<div><p>Normalize a pathname by collapsing redundant separators and up-level\nreferences so that <code class=\"docutils literal notranslate\"><span class=\"pre\">A//B</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">A/B/</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">A/./B</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">A/foo/../B</span></code> all\nbecome <code class=\"docutils literal notranslate\"><span class=\"pre\">A/B</span></code>.  This string manipulation may change the meaning of a path\nthat contains symbolic links.  On Windows, it converts forward slashes to\nbackward slashes. To normalize case, use <a class=\"reference internal\" href=\"#os.path.normcase\" title=\"os.path.normcase\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">normcase()</span></code></a>.</p>\n</div></blockquote>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<blockquote>\n<div><p>On POSIX systems, in accordance with <a class=\"reference external\" href=\"https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_13\">IEEE Std 1003.1 2013 Edition; 4.13\nPathname Resolution</a>,\nif a pathname begins with exactly two slashes, the first component\nfollowing the leading characters may be interpreted in an implementation-defined\nmanner, although more than two leading characters shall be treated as a\nsingle character.</p>\n</div></blockquote>\n<div class=\"versionchanged\">\n<p><span class=\"versionmodified changed\">Changed in version 3.6: </span>Accepts a <a class=\"reference internal\" href=\"../glossary.html#term-path-like-object\"><span class=\"xref std std-term\">path-like object</span></a>.</p>\n</div>\n</div>\n"
    },
    {
      "id": "os.path.realpath",
      "href": "https://docs.python.org/3.11/library/os.path.html#os.path.realpath",
      "module": "os.path",
      "name": "realpath",
      "qualname": "os.path.realpath",
      "signature": "os.path.realpath(path,*,strict=False)",
      "params": [
        "path",
        "*",
        "strict = False"
      ],
      "returns": "str",
      "summary": "Return the canonical path of the specified filename, eliminating any symbolic links encountered in the path (if they are supported by the operating system).",
      "description_text": "Return the canonical path of the specified filename, eliminating any symbolic links encountered in the path (if they are supported by the operating system). By default, the path is evaluated up to the first component that does not exist, is a symlink loop, or whose evaluation raises OSError . All such components are appended unchanged to the existing part of the path. Some errors that are handled this way include “access denied”, “not a directory”, or “bad argument to internal function”. Thus, the resulting path may be missing or inaccessible, may still contain links or loops, and may traverse non-directories. This behavior can be modified by keyword arguments: If strict is True , the first error encountered when evaluating the path is re-raised. In particular, FileNotFoundError is raised if path does not exist, or another OSError if it is otherwise inaccessible. If strict is os.path.ALLOW_MISSING , errors other than FileNotFoundError are re-raised (as with strict=True ). Thus, the returned path will not contain any symbolic links, but the named file and some of its parent directories may be missing. Note This function emulates the operating system’s procedure for making a path canonical, which differs slightly between Windows and UNIX with respect to how links and subsequent path components interact. Operating system APIs make paths canonical as needed, so it’s not normally necessary to call this function.13: The ALLOW_MISSING value for the strict parameter was added.",
      "description_html": "<p>Return the canonical path of the specified filename, eliminating any symbolic\nlinks encountered in the path (if they are supported by the operating\nsystem).</p>\n<p>By default, the path is evaluated up to the first component that does not\nexist, is a symlink loop, or whose evaluation raises <a class=\"reference internal\" href=\"exceptions.html#OSError\" title=\"OSError\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">OSError</span></code></a>.\nAll such components are appended unchanged to the existing part of the path.</p>\n<p>Some errors that are handled this way include “access denied”, “not a\ndirectory”, or “bad argument to internal function”. Thus, the\nresulting path may be missing or inaccessible, may still contain\nlinks or loops, and may traverse non-directories.</p>\n<p>This behavior can be modified by keyword arguments:</p>\n<p>If <em>strict</em> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, the first error encountered when evaluating the path is\nre-raised.\nIn particular, <a class=\"reference internal\" href=\"exceptions.html#FileNotFoundError\" title=\"FileNotFoundError\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">FileNotFoundError</span></code></a> is raised if <em>path</em> does not exist,\nor another <a class=\"reference internal\" href=\"exceptions.html#OSError\" title=\"OSError\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">OSError</span></code></a> if it is otherwise inaccessible.</p>\n<p>If <em>strict</em> is <a class=\"reference internal\" href=\"#os.path.ALLOW_MISSING\" title=\"os.path.ALLOW_MISSING\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">os.path.ALLOW_MISSING</span></code></a>, errors other than\n<a class=\"reference internal\" href=\"exceptions.html#FileNotFoundError\" title=\"FileNotFoundError\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">FileNotFoundError</span></code></a> are re-raised (as with <code class=\"docutils literal notranslate\"><span class=\"pre\">strict=True</span></code>).\nThus, the returned path will not contain any symbolic links, but the named\nfile and some of its parent directories may be missing.</p>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>This function emulates the operating system’s procedure for making a path\ncanonical, which differs slightly between Windows and UNIX with respect\nto how links and subsequent path components interact.</p>\n<p>Operating system APIs make paths canonical as needed, so it’s not\nnormally necessary to call this function.</p>\n</div>\n<div class=\"versionchanged\">\n<p><span class=\"versionmodified changed\">Changed in version 3.6: </span>Accepts a <a class=\"reference internal\" href=\"../glossary.html#term-path-like-object\"><span class=\"xref std std-term\">path-like object</span></a>.</p>\n</div>\n<div class=\"versionchanged\">\n<p><span class=\"versionmodified changed\">Changed in version 3.8: </span>Symbolic links and junctions are now resolved on Windows.</p>\n</div>\n<div class=\"versionchanged\">\n<p><span class=\"versionmodified changed\">Changed in version 3.10: </span>The <em>strict</em> parameter was added.</p>\n</div>\n<div class=\"versionchanged\">\n<p><span class=\"versionmodified changed\">Changed in version 3.11.13: </span>The <a class=\"reference internal\" href=\"#os.path.ALLOW_MISSING\" title=\"os.path.ALLOW_MISSING\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">ALLOW_MISSING</span></code></a> value for the <em>strict</em> parameter\nwas added.</p>\n</div>\n"
    },
    {
      "id": "os.path.relpath",
      "href": "https://docs.python.org/3.11/library/os.path.html#os.path.relpath",
      "module": "os.path",
      "name": "relpath",
      "qualname": "os.path.relpath",
      "signature": "os.path.relpath(path,start=os.curdir)",
      "params": [
        "path",
        "start = os.curdir"
      ],
      "returns": "str",
      "summary": "Return a relative filepath to path either from the current directory or from an optional start directory. This is a path computation: the filesystem is not accessed to confirm the existence or nature of path or start . On Windows, ValueError is raised when path and start are on different drives.",
      "description_text": "Return a relative filepath to path either from the current directory or from an optional start directory. This is a path computation: the filesystem is not accessed to confirm the existence or nature of path or start . On Windows, ValueError is raised when path and start are on different drives. start defaults to os.curdir . Availability : Unix, Windows.",
      "description_html": "<p>Return a relative filepath to <em>path</em> either from the current directory or\nfrom an optional <em>start</em> directory.  This is a path computation:  the\nfilesystem is not accessed to confirm the existence or nature of <em>path</em> or\n<em>start</em>.  On Windows, <a class=\"reference internal\" href=\"exceptions.html#ValueError\" title=\"ValueError\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">ValueError</span></code></a> is raised when <em>path</em> and <em>start</em>\nare on different drives.</p>\n<p><em>start</em> defaults to <a class=\"reference internal\" href=\"os.html#os.curdir\" title=\"os.curdir\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">os.curdir</span></code></a>.</p>\n<div class=\"availability docutils container\">\n<p><a class=\"reference internal\" href=\"intro.html#availability\"><span class=\"std std-ref\">Availability</span></a>: Unix, Windows.</p>\n</div>\n<div class=\"versionchanged\">\n<p><span class=\"versionmodified changed\">Changed in version 3.6: </span>Accepts a <a class=\"reference internal\" href=\"../glossary.html#term-path-like-object\"><span class=\"xref std std-term\">path-like object</span></a>.</p>\n</div>\n"
    },
    {
      "id": "os.path.samefile",
      "href": "https://docs.python.org/3.11/library/os.path.html#os.path.samefile",
      "module": "os.path",
      "name": "samefile",
      "qualname": "os.path.samefile",
      "signature": "os.path.samefile(path1,path2)",
      "params": [
        "path1",
        "path2"
      ],
      "returns": "bool",
      "summary": "Return True if both pathname arguments refer to the same file or directory. This is determined by the device number and i-node number and raises an exception if an os.stat() call on either pathname fails.",
      "description_text": "Return True if both pathname arguments refer to the same file or directory. This is determined by the device number and i-node number and raises an exception if an os.stat() call on either pathname fails. Availability : Unix, Windows.",
      "description_html": "<p>Return <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> if both pathname arguments refer to the same file or directory.\nThis is determined by the device number and i-node number and raises an\nexception if an <a class=\"reference internal\" href=\"os.html#os.stat\" title=\"os.stat\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">os.stat()</span></code></a> call on either pathname fails.</p>\n<div class=\"availability docutils container\">\n<p><a class=\"reference internal\" href=\"intro.html#availability\"><span class=\"std std-ref\">Availability</span></a>: Unix, Windows.</p>\n</div>\n<div class=\"versionchanged\">\n<p><span class=\"versionmodified changed\">Changed in version 3.2: </span>Added Windows support.</p>\n</div>\n<div class=\"versionchanged\">\n<p><span class=\"versionmodified changed\">Changed in version 3.4: </span>Windows now uses the same implementation as all other platforms.</p>\n</div>\n<div class=\"versionchanged\">\n<p><span class=\"versionmodified changed\">Changed in version 3.6: </span>Accepts a <a class=\"reference internal\" href=\"../glossary.html#term-path-like-object\"><span class=\"xref std std-term\">path-like object</span></a>.</p>\n</div>\n"
    },
    {
      "id": "os.path.sameopenfile",
      "href": "https://docs.python.org/3.11/library/os.path.html#os.path.sameopenfile",
      "module": "os.path",
      "name": "sameopenfile",
      "qualname": "os.path.sameopenfile",
      "signature": "os.path.sameopenfile(fp1,fp2)",
      "params": [
        "fp1",
        "fp2"
      ],
      "returns": "bool",
      "summary": "Return True if the file descriptors fp1 and fp2 refer to the same file.",
      "description_text": "Return True if the file descriptors fp1 and fp2 refer to the same file. Availability : Unix, Windows.",
      "description_html": "<p>Return <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> if the file descriptors <em>fp1</em> and <em>fp2</em> refer to the same file.</p>\n<div class=\"availability docutils container\">\n<p><a class=\"reference internal\" href=\"intro.html#availability\"><span class=\"std std-ref\">Availability</span></a>: Unix, Windows.</p>\n</div>\n<div class=\"versionchanged\">\n<p><span class=\"versionmodified changed\">Changed in version 3.2: </span>Added Windows support.</p>\n</div>\n<div class=\"versionchanged\">\n<p><span class=\"versionmodified changed\">Changed in version 3.6: </span>Accepts a <a class=\"reference internal\" href=\"../glossary.html#term-path-like-object\"><span class=\"xref std std-term\">path-like object</span></a>.</p>\n</div>\n"
    },
    {
      "id": "os.path.samestat",
      "href": "https://docs.python.org/3.11/library/os.path.html#os.path.samestat",
      "module": "os.path",
      "name": "samestat",
      "qualname": "os.path.samestat",
      "signature": "os.path.samestat(stat1,stat2)",
      "params": [
        "stat1",
        "stat2"
      ],
      "returns": "bool",
      "summary": "Return True if the stat tuples stat1 and stat2 refer to the same file. These structures may have been returned by os.fstat() , os.lstat() , or os.stat() . This function implements the underlying comparison used by samefile() and sameopenfile() .",
      "description_text": "Return True if the stat tuples stat1 and stat2 refer to the same file. These structures may have been returned by os.fstat() , os.lstat() , or os.stat() . This function implements the underlying comparison used by samefile() and sameopenfile() . Availability : Unix, Windows.",
      "description_html": "<p>Return <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> if the stat tuples <em>stat1</em> and <em>stat2</em> refer to the same file.\nThese structures may have been returned by <a class=\"reference internal\" href=\"os.html#os.fstat\" title=\"os.fstat\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">os.fstat()</span></code></a>,\n<a class=\"reference internal\" href=\"os.html#os.lstat\" title=\"os.lstat\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">os.lstat()</span></code></a>, or <a class=\"reference internal\" href=\"os.html#os.stat\" title=\"os.stat\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">os.stat()</span></code></a>.  This function implements the\nunderlying comparison used by <a class=\"reference internal\" href=\"#os.path.samefile\" title=\"os.path.samefile\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">samefile()</span></code></a> and <a class=\"reference internal\" href=\"#os.path.sameopenfile\" title=\"os.path.sameopenfile\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">sameopenfile()</span></code></a>.</p>\n<div class=\"availability docutils container\">\n<p><a class=\"reference internal\" href=\"intro.html#availability\"><span class=\"std std-ref\">Availability</span></a>: Unix, Windows.</p>\n</div>\n<div class=\"versionchanged\">\n<p><span class=\"versionmodified changed\">Changed in version 3.4: </span>Added Windows support.</p>\n</div>\n<div class=\"versionchanged\">\n<p><span class=\"versionmodified changed\">Changed in version 3.6: </span>Accepts a <a class=\"reference internal\" href=\"../glossary.html#term-path-like-object\"><span class=\"xref std std-term\">path-like object</span></a>.</p>\n</div>\n"
    },
    {
      "id": "os.path.split",
      "href": "https://docs.python.org/3.11/library/os.path.html#os.path.split",
      "module": "os.path",
      "name": "split",
      "qualname": "os.path.split",
      "signature": "os.path.split(path)",
      "params": [
        "path"
      ],
      "returns": "tuple[str, str]",
      "summary": "Split the pathname path into a pair, (head, tail) where tail is the last pathname component and head is everything leading up to that. The tail part will never contain a slash; if path ends in a slash, tail will be empty. If there is no slash in path , head will be empty. If path is empty, both head and tail are empty. Trailing slashes are stripped from head unless it is the root (one or more slashes only). In all cases, join(head, tail) returns a path to the same location as path (but the strings may differ). Also see the functions dirname() and basename() .",
      "description_text": "Split the pathname path into a pair, (head, tail) where tail is the last pathname component and head is everything leading up to that. The tail part will never contain a slash; if path ends in a slash, tail will be empty. If there is no slash in path , head will be empty. If path is empty, both head and tail are empty. Trailing slashes are stripped from head unless it is the root (one or more slashes only). In all cases, join(head, tail) returns a path to the same location as path (but the strings may differ). Also see the functions dirname() and basename() .",
      "description_html": "<p>Split the pathname <em>path</em> into a pair, <code class=\"docutils literal notranslate\"><span class=\"pre\">(head,</span> <span class=\"pre\">tail)</span></code> where <em>tail</em> is the\nlast pathname component and <em>head</em> is everything leading up to that.  The\n<em>tail</em> part will never contain a slash; if <em>path</em> ends in a slash, <em>tail</em>\nwill be empty.  If there is no slash in <em>path</em>, <em>head</em> will be empty.  If\n<em>path</em> is empty, both <em>head</em> and <em>tail</em> are empty.  Trailing slashes are\nstripped from <em>head</em> unless it is the root (one or more slashes only).  In\nall cases, <code class=\"docutils literal notranslate\"><span class=\"pre\">join(head,</span> <span class=\"pre\">tail)</span></code> returns a path to the same location as <em>path</em>\n(but the strings may differ).  Also see the functions <a class=\"reference internal\" href=\"#os.path.dirname\" title=\"os.path.dirname\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">dirname()</span></code></a> and\n<a class=\"reference internal\" href=\"#os.path.basename\" title=\"os.path.basename\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">basename()</span></code></a>.</p>\n<div class=\"versionchanged\">\n<p><span class=\"versionmodified changed\">Changed in version 3.6: </span>Accepts a <a class=\"reference internal\" href=\"../glossary.html#term-path-like-object\"><span class=\"xref std std-term\">path-like object</span></a>.</p>\n</div>\n"
    },
    {
      "id": "os.path.splitdrive",
      "href": "https://docs.python.org/3.11/library/os.path.html#os.path.splitdrive",
      "module": "os.path",
      "name": "splitdrive",
      "qualname": "os.path.splitdrive",
      "signature": "os.path.splitdrive(path)",
      "params": [
        "path"
      ],
      "returns": "tuple[str, str]",
      "summary": "Split the pathname path into a pair (drive, tail) where drive is either a mount point or the empty string. On systems which do not use drive specifications, drive will always be the empty string. In all cases, drive + tail will be the same as path .",
      "description_text": "Split the pathname path into a pair (drive, tail) where drive is either a mount point or the empty string. On systems which do not use drive specifications, drive will always be the empty string. In all cases, drive + tail will be the same as path . On Windows, splits a pathname into drive/UNC sharepoint and relative path. If the path contains a drive letter, drive will contain everything up to and including the colon: >>> splitdrive ( \"c:/dir\" ) (\"c:\", \"/dir\") If the path contains a UNC path, drive will contain the host name and share, up to but not including the fourth separator: >>> splitdrive ( \"//host/computer/dir\" ) (\"//host/computer\", \"/dir\")",
      "description_html": "<p>Split the pathname <em>path</em> into a pair <code class=\"docutils literal notranslate\"><span class=\"pre\">(drive,</span> <span class=\"pre\">tail)</span></code> where <em>drive</em> is either\na mount point or the empty string.  On systems which do not use drive\nspecifications, <em>drive</em> will always be the empty string.  In all cases, <code class=\"docutils literal notranslate\"><span class=\"pre\">drive</span>\n<span class=\"pre\">+</span> <span class=\"pre\">tail</span></code> will be the same as <em>path</em>.</p>\n<p>On Windows, splits a pathname into drive/UNC sharepoint and relative path.</p>\n<p>If the path contains a drive letter, drive will contain everything\nup to and including the colon:</p>\n<div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">splitdrive</span><span class=\"p\">(</span><span class=\"s2\">\"c:/dir\"</span><span class=\"p\">)</span>\n<span class=\"go\">(\"c:\", \"/dir\")</span>\n</pre></div>\n</div>\n<p>If the path contains a UNC path, drive will contain the host name\nand share, up to but not including the fourth separator:</p>\n<div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">splitdrive</span><span class=\"p\">(</span><span class=\"s2\">\"//host/computer/dir\"</span><span class=\"p\">)</span>\n<span class=\"go\">(\"//host/computer\", \"/dir\")</span>\n</pre></div>\n</div>\n<div class=\"versionchanged\">\n<p><span class=\"versionmodified changed\">Changed in version 3.6: </span>Accepts a <a class=\"reference internal\" href=\"../glossary.html#term-path-like-object\"><span class=\"xref std std-term\">path-like object</span></a>.</p>\n</div>\n"
    },
    {
      "id": "os.path.splitext",
      "href": "https://docs.python.org/3.11/library/os.path.html#os.path.splitext",
      "module": "os.path",
      "name": "splitext",
      "qualname": "os.path.splitext",
      "signature": "os.path.splitext(path)",
      "params": [
        "path"
      ],
      "returns": "tuple[str, str]",
      "summary": "Split the pathname path into a pair (root, ext) such that root + ext == path , and the extension, ext , is empty or begins with a period and contains at most one period.",
      "description_text": "Split the pathname path into a pair (root, ext) such that root + ext == path , and the extension, ext , is empty or begins with a period and contains at most one period. If the path contains no extension, ext will be '' : >>> splitext ( 'bar' ) ('bar', '') If the path contains an extension, then ext will be set to this extension, including the leading period. Note that previous periods will be ignored: >>> splitext ( 'foo.bar.exe' ) ('foo.bar', '.exe') >>> splitext ( '/foo/bar.exe' ) ('/foo/bar', '.exe') Leading periods of the last component of the path are considered to be part of the root: >>> splitext ( '.cshrc' ) ('.cshrc', '') >>> splitext ( '/foo/....jpg' ) ('/foo/....jpg', '')",
      "description_html": "<p>Split the pathname <em>path</em> into a pair <code class=\"docutils literal notranslate\"><span class=\"pre\">(root,</span> <span class=\"pre\">ext)</span></code>  such that <code class=\"docutils literal notranslate\"><span class=\"pre\">root</span> <span class=\"pre\">+</span> <span class=\"pre\">ext</span> <span class=\"pre\">==</span>\n<span class=\"pre\">path</span></code>, and the extension, <em>ext</em>, is empty or begins with a period and contains at\nmost one period.</p>\n<p>If the path contains no extension, <em>ext</em> will be <code class=\"docutils literal notranslate\"><span class=\"pre\">''</span></code>:</p>\n<div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">splitext</span><span class=\"p\">(</span><span class=\"s1\">'bar'</span><span class=\"p\">)</span>\n<span class=\"go\">('bar', '')</span>\n</pre></div>\n</div>\n<p>If the path contains an extension, then <em>ext</em> will be set to this extension,\nincluding the leading period. Note that previous periods will be ignored:</p>\n<div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">splitext</span><span class=\"p\">(</span><span class=\"s1\">'foo.bar.exe'</span><span class=\"p\">)</span>\n<span class=\"go\">('foo.bar', '.exe')</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">splitext</span><span class=\"p\">(</span><span class=\"s1\">'/foo/bar.exe'</span><span class=\"p\">)</span>\n<span class=\"go\">('/foo/bar', '.exe')</span>\n</pre></div>\n</div>\n<p>Leading periods of the last component of the path are considered to\nbe part of the root:</p>\n<div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">splitext</span><span class=\"p\">(</span><span class=\"s1\">'.cshrc'</span><span class=\"p\">)</span>\n<span class=\"go\">('.cshrc', '')</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">splitext</span><span class=\"p\">(</span><span class=\"s1\">'/foo/....jpg'</span><span class=\"p\">)</span>\n<span class=\"go\">('/foo/....jpg', '')</span>\n</pre></div>\n</div>\n<div class=\"versionchanged\">\n<p><span class=\"versionmodified changed\">Changed in version 3.6: </span>Accepts a <a class=\"reference internal\" href=\"../glossary.html#term-path-like-object\"><span class=\"xref std std-term\">path-like object</span></a>.</p>\n</div>\n"
    }
  ]
}