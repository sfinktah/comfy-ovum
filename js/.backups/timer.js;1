import { app } from '../../scripts/app.js'
import {app} from "../../../scripts/app.js";
import {api} from "../../../scripts/api.js";
//import { ComfyWidgets } from "../../../scripts/widgets.js";
import {$el} from "../../../scripts/ui.js";

const MARGIN = 8;

const LOCALSTORAGE_KEY = 'cg.quicknodes.timer.history';

function get_position_style(ctx, scroll_width, widget_width, y, node_width, node_height) {
    const visible = app.canvas.ds.scale > 0.5;
    const margin = 10;
    const elRect = ctx.canvas.getBoundingClientRect();
    const transform = new DOMMatrix()
        .scaleSelf(elRect.width / ctx.canvas.width, elRect.height / ctx.canvas.height)
        .multiplySelf(ctx.getTransform())
        .translateSelf(margin, margin + y);


    const x = 50; // Math.max(0, Math.round(ctx.getTransform().a*(node_width - scroll_width - 2*MARGIN)/2));
    return {
        transformOrigin: '0 0',
        transform: transform,
        left: `${x}px`,
        top: `50px`,
        position: "absolute",
        maxWidth: `${widget_width - MARGIN * 2}px`,
        maxHeight: `${node_height - MARGIN * 2 - y}px`,
        width: `auto`,
        height: `auto`,
        overflow: `auto`,
    }
}

function get_node_name_by_id(id) {
    const node = app.graph._nodes_by_id[id];
    if (!node) return `id:${id}`;
    const name = node.title || node.name || node.type || "";

    // RegExp to remove most common Unicode emoji/emoticon characters
    const nameNoEmojis = name.replace(
        /([\u{1F600}-\u{1F64F}]|[\u{1F300}-\u{1F5FF}]|[\u{1F680}-\u{1F6FF}]|[\u{2600}-\u{26FF}]|[\u{2700}-\u{27BF}]|[\u{1F900}-\u{1F9FF}]|[\u{1FA70}-\u{1FAFF}])/gu,
        ''
    );

    return `${nameNoEmojis} (${id})`;
}

class Timer {
    static all_times = [];
    static runs_since_clear = 0;
    static onChange = null;

    static saveToLocalStorage() {
        try {
            localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify(Timer.all_times));
        } catch (e) {
            console.warn('Failed to save timer history:', e);
        }
    }

    static loadFromLocalStorage() {
        try {
            const data = localStorage.getItem(LOCALSTORAGE_KEY);
            if (data) {
                Timer.all_times = JSON.parse(data);
            }
        } catch (e) {
            console.warn('Failed to load timer history:', e);
        }
    }

    static clear() {
        Timer.all_times = [];
        Timer.runs_since_clear = 0;
        if (Timer.onChange) Timer.onChange();
    }

    static start() {
        const t = LiteGraph.getTime();
        ;
        Timer.startTime = t;
        Timer.lastChangeTime = t;
    }

    static _format(number, dp = 2) {
        return `${(number / 1000).toFixed(dp)} s`
    }

    static add_timing(id, dt) {
        var this_node_data = Timer.all_times.find((node_data) => node_data[0] == id);
        if (!this_node_data) {
            this_node_data = [id, 0, 0, 0, 0];
            Timer.all_times.push(this_node_data);
        }
        this_node_data[1] += 1;
        if (!Timer.runs_since_clear || this_node_data[1] > Timer.runs_since_clear) Timer.runs_since_clear = this_node_data[1]
        this_node_data[2] += dt;
        this_node_data[3] = this_node_data[2] / this_node_data[1];
    }

    /**
     * @typedef {Object} WebSocketLike
     * @property {string} url
     * @property {number} readyState
     * @property {number} bufferedAmount
     * @property {?function} onopen
     * @property {?function} onerror
     * @property {?function} onclose
     * @property {string} extensions
     * @property {string} protocol
     * @property {?function} onmessage
     * @property {string} binaryType
     * @property {number} CONNECTING
     * @property {number} OPEN
     * @property {number} CLOSING
     * @property {number} CLOSED
     * @property {function():void} close
     * @property {function(*):void} send
     * @property {function():void} constructor
     * @property {function(string, function, boolean=):void} addEventListener
     * @property {function(Event):boolean} dispatchEvent
     * @property {function(string, function, boolean=):void} removeEventListener
     * @property {function(string):Promise} when
     */

    /**
     * @typedef {Object} SetLike
     * @property {function(any):boolean} has
     * @property {function(any):SetLike} add
     * @property {function(any):boolean} delete
     * @property {function(SetLike):SetLike} difference
     * @property {function():void} clear
     * @property {function():IterableIterator<Array>} entries
     * @property {function(function, *):void} forEach
     * @property {function(SetLike):SetLike} intersection
     * @property {function(SetLike):boolean} isSubsetOf
     * @property {function(SetLike):boolean} isSupersetOf
     * @property {function(SetLike):boolean} isDisjointFrom
     * @property {number} size
     * @property {function(SetLike):SetLike} symmetricDifference
     * @property {function(SetLike):SetLike} union
     * @property {function():IterableIterator<any>} values
     * @property {function():IterableIterator<any>} keys
     * @property {function():void} constructor
     */

    /**
     * @typedef {Object} ComfyApiLike
     * @property {string} api_host
     * @property {string} api_base
     * @property {string} initialClientId
     * @property {string} clientId
     * @property {*} user
     * @property {WebSocketLike} socket
     * @property {SetLike} reportedUnknownMessageTypes
     * @property {function(number, any):Promise<any>} queuePrompt
     * @property {function():Promise<any>} getNodeDefs
     * @property {function(string):string} apiURL
     * @property {function():void} interrupt
     * @property {function():void} constructor
     * @property {function(string):string} internalURL
     * @property {function(string):string} fileURL
     * @property {function(string, Object=):Promise<any>} fetchApi
     * @property {function(string, function, Object=):void} addEventListener
     * @property {function(string, function, Object=):void} removeEventListener
     * @property {function(string, any, boolean=, boolean=, boolean=):void} dispatchCustomEvent
     * @property {function(Event):boolean} dispatchEvent
     * @property {function():Promise<any>} init
     * @property {function():Promise<any>} getExtensions
     * @property {function():Promise<any>} getWorkflowTemplates
     * @property {function():Promise<any>} getCoreWorkflowTemplates
     * @property {function():Promise<any>} getEmbeddings
     * @property {function():Promise<any>} getModelFolders
     * @property {function(string):Promise<any>} getModels
     * @property {function(string, string):Promise<any>} viewMetadata
     * @property {function(string):Promise<any>} getItems
     * @property {function():Promise<any>} getQueue
     * @property {function(number=):Promise<any>} getHistory
     * @property {function():Promise<any>} getSystemStats
     * @property {function(string, any):Promise<any>} deleteItem
     * @property {function(string):Promise<any>} clearItems
     * @property {function():Promise<any>} getUserConfig
     * @property {function(string):Promise<any>} createUser
     * @property {function():Promise<any>} getSettings
     * @property {function(string):Promise<any>} getSetting
     * @property {function(Object):Promise<any>} storeSettings
     * @property {function(string, any):Promise<any>} storeSetting
     * @property {function(string, Object=):Promise<any>} getUserData
     * @property {function(string, any, Object=):Promise<any>} storeUserData
     * @property {function(string):Promise<any>} deleteUserData
     * @property {function(string, string, Object=):Promise<any>} moveUserData
     * @property {function(string):Promise<any>} listUserDataFullInfo
     * @property {function():Promise<any>} getLogs
     * @property {function():Promise<any>} getRawLogs
     * @property {function(boolean):void} subscribeLogs
     * @property {function():Promise<any>} getFolderPaths
     * @property {function():Promise<any>} getCustomNodesI18n
     * @property {function():Promise<any>} when
     */

    /**
     * @typedef {Object} ComfyTickEvent
     * @property {boolean} isTrusted
     * @property {number} detail
     * @property {function(string=, any=, boolean=, boolean=, boolean=):void} initCustomEvent
     * @property {function():void} constructor
     * @property {string} type
     * @property {ComfyApiLike} target
     * @property {ComfyApiLike} currentTarget
     * @property {number} eventPhase
     * @property {boolean} bubbles
     * @property {boolean} cancelable
     * @property {boolean} defaultPrevented
     * @property {boolean} composed
     * @property {number} timeStamp
     * @property {ComfyApiLike} srcElement
     * @property {boolean} returnValue
     * @property {boolean} cancelBubble
     * @property {number} NONE
     * @property {number} CAPTURING_PHASE
     * @property {number} AT_TARGET
     * @property {number} BUBBLING_PHASE
     * @property {function():Array<EventTarget>} composedPath
     * @property {function(string, boolean=, boolean=):void} initEvent
     * @property {function():void} preventDefault
     * @property {function():void} stopImmediatePropagation
     * @property {function():void} stopPropagation
     */

    /**
     * Handles execution tick events from ComfyApi.
     * @param {ComfyTickEvent} x
     */
    static tick(x) {
        if (x.detail == Timer?.currentNodeId) return;
        console.log(`cg-quicknodes: ${(x.type)} ${(x.detail)}`, x);

        const t = LiteGraph.getTime();

        Timer.add_timing(Timer.currentNodeId ? Timer.currentNodeId : "startup", t - Timer.lastChangeTime)

        Timer.lastChangeTime = t;
        Timer.currentNodeId = x.detail;

        if (!Timer.currentNodeId) Timer.add_timing("total", t - Timer.startTime)

        if (Timer.onChange) Timer.onChange();
    }

    static progress(x) {
        // {"type": "progress_state", "data": {"prompt_id": "550ef3d1-cf82-4f94-b31f-a5406002a6e2", "nodes": {"205": {"value": 1, "max": 1, "state": "finished", "node_id": "205", "prompt_id": "550ef3d1-cf82-4f94-b31f-a5406002a6e2", "display_node_id": "205", "parent_node_id": null, "real_node_id": "205"}, "121": {"value": 1, "max": 1, "state": "finished", "node_id": "121", "prompt_id": "550ef3d1-cf82-4f94-b31f-a5406002a6e2", "display_node_id": "121", "parent_node_id": null, "real_node_id": "121"}, "208": {"value": 1, "max": 1, "state": "finished", "node_id": "208", "prompt_id": "550ef3d1-cf82-4f94-b31f-a5406002a6e2", "display_node_id": "208", "parent_node_id": null, "real_node_id": "208"}, "27": {"value": 6, "max": 6, "state": "finished", "node_id": "27", "prompt_id": "550ef3d1-cf82-4f94-b31f-a5406002a6e2", "display_node_id": "27", "parent_node_id": null, "real_node_id": "27"}, "216": {"value": 1.0, "max": 1.0, "state": "finished", "node_id": "216", "prompt_id": "550ef3d1-cf82-4f94-b31f-a5406002a6e2", "display_node_id": "216", "parent_node_id": null, "real_node_id": "216"}, "28": {"value": 3, "max": 3, "state": "finished", "node_id": "28", "prompt_id": "550ef3d1-cf82-4f94-b31f-a5406002a6e2", "display_node_id": "28", "parent_node_id": null, "real_node_id": "28"}, "30": {"value": 81, "max": 81, "state": "finished", "node_id": "30", "prompt_id": "550ef3d1-cf82-4f94-b31f-a5406002a6e2", "display_node_id": "30", "parent_node_id": null, "real_node_id": "30"}, "215:1": {"value": 162, "max": 162, "state": "finished", "node_id": "215:1", "prompt_id": "550ef3d1-cf82-4f94-b31f-a5406002a6e2", "display_node_id": "215:1", "parent_node_id": null, "real_node_id": "215:1"}, "183": {"value": 67, "max": 81, "state": "running", "node_id": "183", "prompt_id": "550ef3d1-cf82-4f94-b31f-a5406002a6e2", "display_node_id": "183", "parent_node_id": null, "real_node_id": "183"}}}}
        // {"type": "progress", "data": {"value": 66, "max": 81, "prompt_id": "550ef3d1-cf82-4f94-b31f-a5406002a6e2", "node": "183"}}

        // {"type": "progress", "data": {"value": 80, "max": 81, "prompt_id": "550ef3d1-cf82-4f94-b31f-a5406002a6e2", "node": "183"}}
        // {"type": "progress_state", "data": {"prompt_id": "550ef3d1-cf82-4f94-b31f-a5406002a6e2", "nodes": {"205": {"value": 1, "max": 1, "state": "finished", "node_id": "205", "prompt_id": "550ef3d1-cf82-4f94-b31f-a5406002a6e2", "display_node_id": "205", "parent_node_id": null, "real_node_id": "205"}, "121": {"value": 1, "max": 1, "state": "finished", "node_id": "121", "prompt_id": "550ef3d1-cf82-4f94-b31f-a5406002a6e2", "display_node_id": "121", "parent_node_id": null, "real_node_id": "121"}, "208": {"value": 1, "max": 1, "state": "finished", "node_id": "208", "prompt_id": "550ef3d1-cf82-4f94-b31f-a5406002a6e2", "display_node_id": "208", "parent_node_id": null, "real_node_id": "208"}, "27": {"value": 6, "max": 6, "state": "finished", "node_id": "27", "prompt_id": "550ef3d1-cf82-4f94-b31f-a5406002a6e2", "display_node_id": "27", "parent_node_id": null, "real_node_id": "27"}, "216": {"value": 1.0, "max": 1.0, "state": "finished", "node_id": "216", "prompt_id": "550ef3d1-cf82-4f94-b31f-a5406002a6e2", "display_node_id": "216", "parent_node_id": null, "real_node_id": "216"}, "28": {"value": 3, "max": 3, "state": "finished", "node_id": "28", "prompt_id": "550ef3d1-cf82-4f94-b31f-a5406002a6e2", "display_node_id": "28", "parent_node_id": null, "real_node_id": "28"}, "30": {"value": 81, "max": 81, "state": "finished", "node_id": "30", "prompt_id": "550ef3d1-cf82-4f94-b31f-a5406002a6e2", "display_node_id": "30", "parent_node_id": null, "real_node_id": "30"}, "215:1": {"value": 162, "max": 162, "state": "finished", "node_id": "215:1", "prompt_id": "550ef3d1-cf82-4f94-b31f-a5406002a6e2", "display_node_id": "215:1", "parent_node_id": null, "real_node_id": "215:1"}, "183": {"value": 81, "max": 81, "state": "running", "node_id": "183", "prompt_id": "550ef3d1-cf82-4f94-b31f-a5406002a6e2", "display_node_id": "183", "parent_node_id": null, "real_node_id": "183"}}}}	1871
    }

    static searchTerm = '';
    static searchRegex = false;

    static html(scope) {
        // Search/filter UI
        const searchInput = $el("input", {
            type: "text",
            placeholder: "Quick search...",
            value: Timer.searchTerm,
            style: { marginRight: "8px", width: "150px" },
            oninput: e => {
                console.log('html.search.oninput');
                Timer.searchTerm = e.target.value;
                if (Timer.onChange) Timer.onChange();
            },
            onenter: e => {
                console.log('html.search.onenter');
            },
            // Prevent ComfyUI/global key handlers while typing here
            onkeydown: e => {
                console.log('html.search.onkeydown');
                if (e.key === "Enter" || e.key === "Escape")
                e.stopPropagation();
            },
            onkeyup: e => {
                e.stopPropagation();
            },
            onkeypress: e => {
                e.stopPropagation();
            }
        });

        const regexCheckbox = $el("input", {
            type: "checkbox",
            checked: Timer.searchRegex,
            id: "timer-search-regex",
            onchange: e => {
                Timer.searchRegex = e.target.checked;
                if (Timer.onChange) Timer.onChange();
            }
        });

        const regexLabel = $el("label", {
            for: "timer-search-regex",
            style: {fontSize: "80%"}
        }, ["Regex"]);

        // Table header
        const table = $el("table", {
            "textAlign": "right",
            "border": "1px solid",
            "className": "cg-timer-table"
        }, [
            $el("tr", [
                $el("th", {className: "node", "textContent": "Node"}),
                $el("th", {className: "runs", "textContent": "Runs"}),
                $el("th", {className: "per-run", "textContent": "Per run"}),
                $el("th", {className: "per-flow", "textContent": "Per flow"}),
            ])
        ]);

        // Compute per-flow
        Timer.all_times.forEach((node_data) => {
            node_data[4] = node_data[2] / Timer.runs_since_clear;
        });
        // Sort descending by per-flow
        Timer.all_times.sort((a, b) => b[4] - a[4]);

        // Build filter
        let filterFunc = () => true;
        if (Timer.searchTerm) {
            if (Timer.searchRegex) {
                let re;
                try {
                    re = new RegExp(Timer.searchTerm, "i");
                    filterFunc = (node_data) => re.test(get_node_name_by_id(node_data[0]));
                } catch {
                    filterFunc = () => true; // Don't filter if regex is broken
                }
            } else {
                const searchLower = Timer.searchTerm.toLowerCase();
                filterFunc = (node_data) =>
                    get_node_name_by_id(node_data[0]).toLowerCase().includes(searchLower);
            }
        }

        Timer.all_times.forEach((node_data) => {
            if (!filterFunc(node_data)) return;
            table.append($el("tr", [
                $el("td", {className: "node", textContent: get_node_name_by_id(node_data[0])}),
                $el("td", {className: "runs", "textContent": node_data[1].toString()}),
                $el("td", {className: "per-run", "textContent": Timer._format(node_data[3])}),
                $el("td", {className: "per-flow", "textContent": Timer._format(node_data[4])}),
            ]));
        });

        // Return just the table if scope is "table"
        if (scope === "table") {
            return table;
        }

        // Top-level div with search UI and table
        return $el("div", {
            className: "cg-timer-widget",
        }, [
            $el("div", {
                className: "cg-timer-search",
                style: {marginBottom: "6px"}
            }, [
                searchInput,
                regexCheckbox,
                regexLabel,
            ]),
            table
        ]);
    }
}

app.registerExtension({
    name: "cg.quicknodes.timer",
    setup: function () {
        Timer.loadFromLocalStorage(); // <--- Load history on startup
        window.Timer = Timer;
        api.addEventListener("executing", Timer.tick);
        api.addEventListener("progress", Timer.progress);
        console.log('cg.quicknodes.timer registered');
    },
    async beforeRegisterNodeDef(nodeType, nodeData, app) {
        if (nodeType.comfyClass === "Timer") {
            const orig_executionStart = nodeType.prototype.onExecutionStart;
            nodeType.prototype.onExecutionStart = function () {
                orig_executionStart?.apply(this, arguments);
                Timer.start();
            }

            const orig_nodeCreated = nodeType.prototype.onNodeCreated;
            nodeType.prototype.onNodeCreated = function () {
                orig_nodeCreated?.apply(this, arguments);


                this.addWidget("button", "clear", "", Timer.clear);

                // Add Save button
                this.addWidget("button", "save", "", () => {
                    Timer.saveToLocalStorage();
                });

                const widget = {
                    type: "HTML",
                    name: "flying",
                    draw: function (ctx, node, widget_width, y, widget_height) {
                        Object.assign(this.inputEl.style, get_position_style(ctx, this.inputEl.scrollWidth, widget_width, y, node.size[0], node.size[1]));
                    },
                };
                widget.inputEl = $el("div", [$el("span"),]);

                document.body.appendChild(widget.inputEl);

                this.addCustomWidget(widget);
                this.onRemoved = function () {
                    widget.inputEl.remove();
                };
                this.serialize_widgets = false;

                Timer.onChange = function () {
                    // .cg-timer-table
                    
                    const existingTable = widget.inputEl.querySelector('.cg-timer-table');
                    if (existingTable) {
                        existingTable.parentNode.replaceChild(Timer.html('table'), existingTable);
                    } else {
                        widget.inputEl.replaceChild(Timer.html(), widget.inputEl.firstChild);
                    }
                    //this.onResize?.(this.size);
                }

                // Mount the element inside the node
                // this.addCustomWidget(htmlWidget);

                // // Add to widget area inside node
                // if (this.widget_area) {
                //     this.widget_area.appendChild(htmlWidget.htmlEl);
                // } else {
                //     // fallback: attach to node's main DOM element if available (depends on ComfyUI version)
                //     if (this.el) this.el.appendChild(htmlWidget.htmlEl);
                //     else document.body.appendChild(htmlWidget.htmlEl); // fallback (shouldn't be needed)
                // }
                //
                // // Clean up when node is removed
                // this.onRemoved = function () {
                //     htmlWidget.htmlEl.remove();
                // };
                // this.serialize_widgets = false; // don't auto-save widget state
            };
        }
    },

})


/*

index.js:14 Unhandled message: {"type": "progress_state", "data": {"prompt_id": "0a55c3c8-9840-4ef3-8c20-aad8c3bcc2ee", "nodes": {"192": {"value": 1, "max": 1, "state": "finished", "node_id": "192", "prompt_id": "0a55c3c8-9840-4ef3-8c20-aad8c3bcc2ee", "display_node_id": "192", "parent_node_id": null, "real_node_id": "192"}, "119": {"value": 1, "max": 1, "state": "finished", "node_id": "119", "prompt_id": "0a55c3c8-9840-4ef3-8c20-aad8c3bcc2ee", "display_node_id": "119", "parent_node_id": null, "real_node_id": "119"}, "205": {"value": 1, "max": 1, "state": "finished", "node_id": "205", "prompt_id": "0a55c3c8-9840-4ef3-8c20-aad8c3bcc2ee", "display_node_id": "205", "parent_node_id": null, "real_node_id": "205"}, "120": {"value": 1, "max": 1, "state": "finished", "node_id": "120", "prompt_id": "0a55c3c8-9840-4ef3-8c20-aad8c3bcc2ee", "display_node_id": "120", "parent_node_id": null, "real_node_id": "120"}, "208": {"value": 1, "max": 1, "state": "finished", "node_id": "208", "prompt_id": "0a55c3c8-9840-4ef3-8c20-aad8c3bcc2ee", "display_node_id": "208", "parent_node_id": null, "real_node_id": "208"}, "200": {"value": 1.0, "max": 1.0, "state": "finished", "node_id": "200", "prompt_id": "0a55c3c8-9840-4ef3-8c20-aad8c3bcc2ee", "display_node_id": "200", "parent_node_id": null, "real_node_id": "200"}, "198": {"value": 1.0, "max": 1.0, "state": "finished", "node_id": "198", "prompt_id": "0a55c3c8-9840-4ef3-8c20-aad8c3bcc2ee", "display_node_id": "198", "parent_node_id": null, "real_node_id": "198"}, "204": {"value": 1.0, "max": 1.0, "state": "finished", "node_id": "204", "prompt_id": "0a55c3c8-9840-4ef3-8c20-aad8c3bcc2ee", "display_node_id": "204", "parent_node_id": null, "real_node_id": "204"}, "196": {"value": 1.0, "max": 1.0, "state": "finished", "node_id": "196", "prompt_id": "0a55c3c8-9840-4ef3-8c20-aad8c3bcc2ee", "display_node_id": "196", "parent_node_id": null, "real_node_id": "196"}, "194": {"value": 1.0, "max": 1.0, "state": "finished", "node_id": "194", "prompt_id": "0a55c3c8-9840-4ef3-8c20-aad8c3bcc2ee", "display_node_id": "194", "parent_node_id": null, "real_node_id": "194"}, "22": {"value": 607, "max": 607, "state": "finished", "node_id": "22", "prompt_id": "0a55c3c8-9840-4ef3-8c20-aad8c3bcc2ee", "display_node_id": "22", "parent_node_id": null, "real_node_id": "22"}, "27": {"value": 3, "max": 6, "state": "running", "node_id": "27", "prompt_id": "0a55c3c8-9840-4ef3-8c20-aad8c3bcc2ee", "display_node_id": "27", "parent_node_id": null, "real_node_id": "27"}}}} Error: Unknown message type progress_state
Unhandled message: {"type": "crystools.monitor", "data": {"cpu_utilization": 20.7, "ram_total": 68523573248, "ram_used": 64373084160, "ram_used_percent": 93.9, "hdd_total": -1, "hdd_used": -1, "hdd_used_percent": -1, "device_type": "cuda", "gpus": [{"gpu_utilization": 14, "gpu_temperature": 45, "vram_total": 25753026560, "vram_used": 6836715520, "vram_used_percent": 26.547231270358306}]}} Error: Unknown message type crystools.monitor at WebSocket.<anonymous> (api.ts:479:23)
 */